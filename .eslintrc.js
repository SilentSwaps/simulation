module.exports = {
	parser: "@typescript-eslint/parser",
	plugins: [
		"@typescript-eslint",
		"react",
	],
	extends: [
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:@typescript-eslint/recommended",
		// "plugin:@typescript-eslint/recommended-requiring-type-checking",
	],
	root: true,
	env: {
		node: true,
		browser: true,
		jest: true,
	},
	settings: { react: { version: "detect" } },
	rules: {
		"array-bracket-spacing": [
			"error", "always", { singleValue: false },
		],
		camelcase: "error",
		"default-case": "error",
		"default-case-last": "error",
		"default-param-last": "error",
		eqeqeq: "error",
		"max-depth": ["error", 4],
		"max-len": [
			"error", {
				code: 120,
				tabWidth: 4,
				ignoreComments: true,
				ignoreUrls: true,
				ignoreStrings: true,
				ignoreTemplateLiterals: true,
				ignoreRegExpLiterals: true,
			},
		],
		"no-debugger": "warn",
		"no-console": "warn",
		"no-duplicate-imports": "off",
		"no-else-return": "error",
		"no-eval": "error",
		"no-return-await": "error",
		"no-shadow": "off",
		"no-useless-catch": "error",
		"no-var": "error",
		"no-useless-return": "error",
		"no-warning-comments": "error",
		"object-shorthand": "error",
		"prefer-arrow-callback": "error",
		"prefer-const": "error",
		"prefer-object-spread": "error",
		"prefer-promise-reject-errors": "error",
		"prefer-rest-params": "error",
		"prefer-spread": "error",
		"prefer-template": "error",
		"quote-props": ["error", "as-needed"],
		"require-await": "off",
		"spaced-comment": ["error", "always"],
		"array-bracket-newline": [
			"error", {
				multiline: true,
				minItems: 3,
			},
		],
		"array-bracket-spacing": [
			"error", "always", { singleValue: false },
		],
		"array-element-newline": ["error", "consistent"],
		"arrow-parens": [
			"error", "as-needed", { requireForBlockBody: true },
		],
		"arrow-spacing": ["error", { before: true, after: true }],
		"block-spacing": "off",
		"brace-style": "off",
		"comma-dangle": "off",
		"comma-spacing": "off",
		"comma-style": ["error", "last"],
		"computed-property-spacing": ["error", "never"],
		"dot-location": ["error", "property"],
		"eol-last": ["error", "always"],
		"no-multiple-empty-lines": ["error", { max: 1 }],
		"no-trailing-spaces": ["error", { skipBlankLines: false, ignoreComments: false }],
		"func-call-spacing": ["error", "never"],
		indent: "off",
		"jsx-quotes": ["error", "prefer-double"],
		"keyword-spacing": "off",
		"linebreak-style": ["error", "windows"],
		"newline-per-chained-call": ["error", { ignoreChainWithDepth: 2 }],
		"no-mixed-spaces-and-tabs": "error",
		semi: ["error", "always"],
		quotes: "off",
		"object-curly-newline": [
			"error", {
				multiline: true,
				minProperties: 3,
			},
		],
		"object-curly-spacing": "off",
		"operator-linebreak": ["error", "before"],

		"no-unused-vars": "off",

		"@typescript-eslint/await-thenable": "error",
		"@typescript-eslint/no-explicit-any": "error",
		"@typescript-eslint/no-floating-promises": ["error", { ignoreVoid: true }],
		// "@typescript-eslint/no-unsafe-argument": "error",
		// "@typescript-eslint/no-unsafe-assignment": "error",
		// "@typescript-eslint/no-unsafe-call": "error",
		// "@typescript-eslint/no-unsafe-member-access": "error",
		// "@typescript-eslint/no-unsafe-return": "error",
		"@typescript-eslint/prefer-nullish-coalescing": "error",
		"@typescript-eslint/prefer-ts-expect-error": "error",

		"@typescript-eslint/block-spacing": ["error", "always"],
		"@typescript-eslint/brace-style": ["error", "1tbs"],
		"@typescript-eslint/comma-dangle": ["error", "always-multiline"],
		"@typescript-eslint/comma-spacing": ["error", { before: false, after: true }],
		"@typescript-eslint/indent": [
			"error", "tab", { SwitchCase: 1 },
		],
		"@typescript-eslint/keyword-spacing": ["error", { before: true, after: true }],
		"@typescript-eslint/no-duplicate-imports": ["error", { includeExports: true }],
		"@typescript-eslint/no-shadow": "error",
		"@typescript-eslint/object-curly-spacing": ["error", "always"],
		"@typescript-eslint/quotes": ["error", "double"],
		"@typescript-eslint/require-await": "error",

		"react/jsx-boolean-value": ["error", "never"],
		"react/jsx-closing-bracket-location": ["error", "tag-aligned"],
		"react/jsx-closing-tag-location": "error",
		"react/jsx-curly-brace-presence": [
			"error", {
				props: "never",
				children: "never",
				propElementValues: "always",
			},
		],
		"react/jsx-curly-newline": ["error", "consistent"],
		"react/jsx-curly-spacing": ["error", { when: "never" }],
		"react/jsx-equals-spacing": "error",
		"react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
		"react/jsx-indent": [
			"error", "tab", {
				checkAttributes: true,
				indentLogicalExpressions: true,
			},
		],
		"react/jsx-key": ["error", { warnOnDuplicates: true }],
		"react/jsx-max-depth": ["error", { max: 10 }],
		"react/jsx-max-props-per-line": [
			"error", {
				maximum: {
					single: 3,
					multi: 1,
				},
			},
		],
		"react/jsx-newline": ["error", { prevent: false }],
		"react/jsx-no-comment-textnodes": "error",
		"react/jsx-no-duplicate-props": "error",
		"react/jsx-no-leaked-render": ["error", { validStrategies: ["coerce", "ternary"] }],
		"react/jsx-no-undef": ["error", { allowGlobals: true }],
		"react/jsx-no-useless-fragment": ["error", { allowExpressions: true }],
		"react/jsx-one-expression-per-line": ["error", { allow: "literal" }],
		"react/jsx-tag-spacing": [
			"error", {
				closingSlash: "never",
				beforeSelfClosing: "always",
				afterOpening: "never",
				beforeClosing: "never",
			},
		],
		"react/jsx-uses-react": "error",
		"react/jsx-uses-vars": "error",
		"react/jsx-wrap-multilines": [
			"error", {
				declaration: "parens-new-line",
				assignment: "parens-new-line",
				return: "parens-new-line",
				arrow: "parens-new-line",
				condition: "parens-new-line",
				logical: "parens-new-line",
				prop: "parens-new-line",
			},
		],

		"react/no-unused-prop-types": "warn",
		"react/no-unused-state": "warn",
		"react/prop-types": "error",
		"react/self-closing-comp": ["error", { component: true, html: true }],
	},
	parserOptions: {
		ecmaFeatures: { jsx: true },
		tsconfigRootDir: __dirname,
		project: true,
		sourceType: "module",
	},
};
